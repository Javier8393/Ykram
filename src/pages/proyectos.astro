---
// Importa el layout base
import BaseLayout from '../layouts/BaseLayout.astro';
import cloudinary from "cloudinary";

// Define la interfaz para las imágenes de Cloudinary
interface CloudinaryImage {
    public_id: string;
    secure_url: string;
    display_name: string; // Añadir display_name para la comparación
}

// Define la interfaz para las carpetas
interface FolderData {
    name: string;
    path: string;
}

// Define la interfaz para los datos del proyecto
interface ProjectData {
    name: string; 
    description: string; 
    featured_image: string | null;
    folder: string; // Ruta de la carpeta
}

// Inicializa un array para almacenar los proyectos
let projects: ProjectData[] = [];

// Configura Cloudinary
cloudinary.v2.config({
    cloud_name: process.env.PUBLIC_CLOUDINARY_CLOUD_NAME,
    api_key: process.env.CLOUDINARY_API_KEY,
    api_secret: process.env.CLOUDINARY_API_SECRET,
});

try {
    // Obtiene las carpetas en Cloudinary
    const { folders }: { folders: FolderData[] } = await cloudinary.v2.api.sub_folders('Proyectos');

    projects = await Promise.all(
        folders.map(async (folder: FolderData) => {
            try {
                // Especificar el tipo de las imágenes
                const { resources: images }: { resources: CloudinaryImage[] } = await cloudinary.v2.search
                    .expression(`folder:${folder.path} AND resource_type:image`)
                    .execute();

                const { resources: jsonResources } = await cloudinary.v2.search
                    .expression(`folder:${folder.path} AND filename:project.json`)
                    .execute();

                if (jsonResources.length > 0) {
                    const response = await fetch(jsonResources[0].secure_url);
                    const projectData = await response.json();

                    // Buscar la imagen que coincida usando display_name
                    const matchedImage = images.find((image: CloudinaryImage) => 
                        image.display_name === projectData.featured_image
                    );

                    // Genera la URL de la imagen si se encuentra
                    const featuredImageUrl = matchedImage
                        ? matchedImage.secure_url
                        : null; // Maneja el caso donde no se encuentra la imagen

                    return {
                        ...projectData,
                        folder: folder.path,
                        featured_image: featuredImageUrl,
                        
                    };
                }
            } catch (error) {
                console.error(`Error al cargar el JSON del proyecto ${folder.name}:`, error);
            }
            return null;
        })
    );

    // Filtra proyectos nulos en caso de que no se haya encontrado el JSON
    projects = projects.filter(project => project !== null);

} catch (error) {
    console.error("Error al cargar los proyectos:", error);
}

---

<BaseLayout>
    <div class="projects-list">
        {projects.length > 0 ? (
            projects.map((project) => (
              
            <a href={`/${project.folder.split('/')[1]}`} class="project-link">
              <div class="project-item">
                <img src={project.featured_image} alt={project.name} class="project-image" />
                <div class="project-details">
                  <h3>{project.name}</h3>
                  <p>{project.description}</p> 
                </div>
              </div>
            </a>
            ))
        ) : (
            <p>No hay proyectos disponibles.</p>
        )}
    </div>
</BaseLayout>

<style>
.projects-list {
    display: flex;
    flex-direction: column;
    align-items: center; 
    gap: 3rem; /* Más espacio entre los recuadros */
    max-width: 1600px; /* Ancho máximo mayor */
    margin: 0 auto;
    padding: 2.5rem; /* Más espacio interno */
}

.project-item {
    display: flex;
    align-items: flex-start;
    border: 1px solid var(--gray-800);
    border-radius: 1.25rem; /* Bordes más redondeados */
    padding: 2.5rem; /* Más espacio interno */
    background-color: var(--gray-999);
    box-shadow: var(--shadow-sm);
    transition: box-shadow 0.3s;
    width: 1000px; /* Ancho mayor */
    max-width: 100%; 
    min-height: 350px; /* Altura mínima más grande */
}

.project-item:hover {
    box-shadow: 0 15px 50px rgba(0, 0, 0, 0.6); /* Sombra más pronunciada */
}

.project-image {
    width: 300px; /* Imagen más grande */
    height: 300px;
    border-radius: 1.25rem;
    object-fit: cover;
    margin-right: 2.5rem; /* Más espacio entre imagen y texto */
}

.project-details {
    flex-grow: 1;
    display: flex;
    flex-direction: column;
    justify-content: center; /* Centra verticalmente el texto junto a la imagen */
}

.project-details h3 {
    font-size: 2rem; /* Título más grande */
    margin: 0;
    color: var(--accent-light);
    text-decoration: none;
}

.project-details p {
    color: var(--gray-100);
    margin-top: 1rem; /* Más espacio entre el título y la descripción */
    font-size: 1.5rem; /* Texto más grande */
    line-height: 1.8; /* Mejora la legibilidad */
    overflow-wrap: break-word;
}

.project-link {
    text-decoration: none;
}

/* Ajustes responsivos para pantallas pequeñas */
@media (max-width: 768px) {
    .project-item {
        flex-direction: column;
        align-items: center;
        width: 100%;
        text-align: center;
    }

    .project-image {
        width: 100%; /* Imagen se adapta al ancho del contenedor */
        max-width: 400px; /* Tamaño máximo mayor */
        height: auto;
        margin: 0 0 2rem 0;
    }

    .project-details {
        align-items: center;
        width: 100%;
    }

    .project-details h3 {
        font-size: 1.75rem; /* Ajusta el tamaño del título */
    }

    .project-details p {
        font-size: 1.25rem; /* Ajusta el tamaño del texto */
    }
}




</style>

