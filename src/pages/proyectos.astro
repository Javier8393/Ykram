---
// Importa el layout base
import cloudinary from "../cloudinary";
import BaseLayout from "../layouts/BaseLayout.astro";

// Define la interfaz para las im치genes de Cloudinary
interface CloudinaryImage {
    public_id: string;
    secure_url: string;
    display_name: string; // A침adir display_name para la comparaci칩n
}

// Define la interfaz para las carpetas
interface FolderData {
    name: string;
    path: string;
}

// Define la interfaz para los datos del proyecto
interface ProjectData {
    name: string;
    description: string;
    featured_image: string | null;
    folder: string; // Ruta de la carpeta
}

// Inicializa un array para almacenar los proyectos
let projects: ProjectData[] = [];

try {
    // Obtiene las carpetas en Cloudinary
    const { folders }: { folders: FolderData[] } =
        await cloudinary.api.sub_folders("Proyectos");

    projects = await Promise.all(
        folders.map(async (folder: FolderData) => {
            try {
                // Especificar el tipo de las im치genes
                const { resources: images }: { resources: CloudinaryImage[] } =
                    await cloudinary.search
                        .expression(
                            `folder:${folder.path} AND resource_type:image`,
                        )
                        .execute();

                const { resources: jsonResources } = await cloudinary.search
                    .expression(
                        `folder:${folder.path} AND filename:project.json`,
                    )
                    .execute();

                if (jsonResources.length > 0) {
                    const response = await fetch(jsonResources[0].secure_url);
                    const projectData = await response.json();

                    // Buscar la imagen que coincida usando display_name
                    const matchedImage = images.find(
                        (image: CloudinaryImage) =>
                            image.display_name === projectData.featured_image,
                    );

                    // Genera la URL de la imagen si se encuentra
                    const featuredImageUrl = matchedImage
                        ? matchedImage.secure_url
                        : null; // Maneja el caso donde no se encuentra la imagen

                    return {
                        ...projectData,
                        folder: folder.path,
                        featured_image: featuredImageUrl,
                    };
                }
            } catch (error) {
                console.error(
                    `Error al cargar el JSON del proyecto ${folder.name}:`,
                    error,
                );
            }
            return null;
        }),
    );

    // Filtra proyectos nulos en caso de que no se haya encontrado el JSON
    projects = projects.filter((project) => project !== null);
} catch (error) {
    console.error("Error al cargar los proyectos:", error);
}
---

<BaseLayout>
    <div class="projects-list">
        {
            projects.length > 0 ? (
                projects.map((project) => (
                    <a
                        href={`/${project.folder.split("/")[1]}`}
                        class="project-item"
                    >
                        <img
                            src={project.featured_image}
                            alt={project.name}
                            class="project-image"
                        />
                        <div class="project-details">
                            <h3>{project.name}</h3>
                            <p>{project.description}</p>
                        </div>
                    </a>
                ))
            ) : (
                <p>No hay proyectos disponibles.</p>
            )
        }
    </div>
</BaseLayout>

<style>
    .projects-list {
        padding: 2.5rem;
        display: flex;
        flex-direction: column;
        gap: 3rem;
    }

    .project-item {
        border: 1px solid var(--gray-800);
        border-radius: 1.25rem;
        padding: 2rem;
        background-color: var(--gray-999);
        text-decoration: none;
        display: flex;
        flex-direction: column;
        gap: 1rem;
    }

    .project-image {
        width: 100%;
        height: auto;
        border-radius: 1.25rem;
        object-fit: fill;
    }

    .project-details h3 {
        font-size: 2rem;
        margin: 0;
        color: var(--accent-light);
        text-align: center;
    }

    .project-details p {
        color: var(--gray-100);
        font-size: 1.5rem;
        line-height: 1.8;
    }

    @media (min-width: 768px) {
        .project-item {
            flex-direction: row;
            gap: 3rem;
        }

        .project-details h3 {
            text-align: left;
        }

        .projects-list {
            max-width: 1000px;
            margin-left: auto;
            margin-right: auto;
        }

        .project-image {
        width: 300px;
        height: 300px;
        border-radius: 1.25rem;
        object-fit: fill;
    }

    }
</style>
