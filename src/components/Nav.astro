---
import Icon from './Icon.astro';
import type { iconPaths } from './IconPaths';
import { getLanguage, getBasePath } from '../utils/i18n';

interface Props {
	lang?: 'en' | 'es';
}

// Usar el idioma proporcionado o determinarlo de la URL
const lang = Astro.props.lang || getLanguage(Astro.url.pathname);

// Mapeo de rutas entre idiomas
const routeMap = {
	'es': {
		'proyectos': 'projects',
		'ilustraciones': 'illustrations',
		'concept-art': 'concept-art',
		'contacto': 'contact',
		'aviso-legal': 'legal-notice',
		'privacidad': 'privacy-policy',
		'cookies': 'cookies'
	},
	'en': {
		'projects': 'proyectos',
		'illustrations': 'ilustraciones',
		'concept-art': 'concept-art',
		'contact': 'contacto',
		'legal-notice': 'aviso-legal',
		'privacy-policy': 'privacidad',
		'cookies': 'cookies'
	}
} as const;

type RouteMap = typeof routeMap;
type Lang = keyof RouteMap;
type RouteKey<T extends Lang> = keyof RouteMap[T];

// Función para obtener la ruta equivalente en el otro idioma
function getEquivalentPath(currentPath: string, targetLang: Lang): string {
	// Si estamos en la raíz, simplemente cambiar el prefijo de idioma
	if (currentPath === '/' || currentPath === '/en/') {
		return targetLang === 'en' ? '/en/' : '/';
	}

	// Obtener las partes de la ruta sin el prefijo de idioma
	const pathWithoutLang = currentPath.startsWith('/en') ? currentPath.slice(3) : currentPath;
	const pathParts = pathWithoutLang.split('/').filter(Boolean);
	
	if (pathParts.length === 0) {
		return targetLang === 'en' ? '/en/' : '/';
	}

	// Obtener la ruta base y su equivalente
	const currentLang = currentPath.startsWith('/en') ? 'en' : 'es';
	const baseRoute = pathParts[0];
	
	// Si la ruta base tiene un equivalente en el otro idioma, usarlo
	if (baseRoute in routeMap[currentLang]) {
		const equivalentRoute = routeMap[currentLang][baseRoute as RouteKey<typeof currentLang>];
		const remainingPath = pathParts.slice(1).join('/');
		const pathSuffix = remainingPath ? `/${remainingPath}` : '/';
		return targetLang === 'en' ? `/en/${equivalentRoute}${pathSuffix}` : `/${equivalentRoute}${pathSuffix}`;
	}

	// Si no hay equivalente, mantener la misma ruta pero cambiar el prefijo de idioma
	return targetLang === 'en' ? `/en${pathWithoutLang}` : pathWithoutLang;
}

// Textos según el idioma
const texts = {
	es: {
		home: "Inicio",
		projects: "Proyectos",
		illustrations: "Ilustraciones",
		conceptArt: "Concept Art",
		contact: "Contacto",
		legal: "Aviso Legal",
		privacy: "Política de Privacidad",
		cookies: "Política de Cookies"
	},
	en: {
		home: "Home",
		projects: "Projects",
		illustrations: "Illustrations",
		conceptArt: "Concept Art",
		contact: "Contact",
		legal: "Legal Notice",
		privacy: "Privacy Policy",
		cookies: "Cookie Policy"
	}
};

const currentTexts = texts[lang];

// Rutas base según el idioma
const basePath = lang === 'en' ? '/en' : '';

/** Main menu items */
const textLinks: { label: string; href: string }[] = [
	{ label: currentTexts.home, href: lang === 'en' ? '/en/' : '/' },
	{ label: currentTexts.projects, href: `${basePath}/${lang === 'en' ? 'projects' : 'proyectos'}/` },
	{ label: currentTexts.illustrations, href: `${basePath}/${lang === 'en' ? 'illustrations' : 'ilustraciones'}/` },
	{ label: currentTexts.conceptArt, href: `${basePath}/concept-art/` },
	{ label: currentTexts.contact, href: `${basePath}/${lang === 'en' ? 'contact' : 'contacto'}/` },
];

/** Icon links to social media — edit these with links to your profiles! */
const iconLinks: { label: string; href: string; icon: keyof typeof iconPaths }[] = [
	{ label: 'Spotify', href: 'https://open.spotify.com/show/1CI2iK8Rv4AQWCvazJd2fI?si=o6FCuhZ1QTuXzPLuFRpa_g&nd=1&dlsi=a826e8b43be14771', icon: 'spotify' },
	{ label: 'Ivoox', href: 'https://www.ivoox.com/podcast-camino-del-ilustrador_sq_f1831710_1.html', icon: 'ivoox' },
	{ label: 'Youtube', href: 'https://youtube.com/@elcaminodelilustrador', icon: 'youtube' },
	{ label: 'Apple Podcast', href: 'https://podcasts.apple.com/es/podcast/el-camino-del-ilustrador/id1493738985', icon: 'apple' },
];
---

<nav>
	<div class="menu-header">
		<a href={lang === 'en' ? '/en/' : '/'} class="site-title">
			<img src="/assets/icons/logoweb-YKRAM-optimizado.gif" alt="Icono YKRAM" width="200">
		</a>
		<menu-button>
			<template>
				<button class="menu-button" aria-expanded="false">
					<span class="sr-only">Menu</span>
					<Icon icon="list" />
				</button>
			</template>
		</menu-button>
	</div>

	<div id="menu-content" hidden>
		<ul class="nav-items">
			{
				textLinks.map(({ label, href }) => {
					const isActive = Astro.url.pathname === href || 
						(href !== '/' && href !== '/en/' && Astro.url.pathname.startsWith(href)) ||
						(href === '/' && Astro.url.pathname === '/') ||
						(href === '/en/' && Astro.url.pathname === '/en/');
					return (
						<li>
							<a
								aria-current={isActive}
								class:list={[
									'link',
									{ active: isActive }
								]}
								href={href}
							>
								{label}
							</a>
						</li>
					);
				})
			}
		</ul>
		<div class="menu-footer">
			<div class="language-selector">
				<div class="language-links">
					<a 
						href={getEquivalentPath(Astro.url.pathname, 'es')}
						class:list={[
							'lang-link',
							{ active: lang === 'es' }
						]}
					>
						ES
					</a>
					<span class="separator">|</span>
					<a 
						href={getEquivalentPath(Astro.url.pathname, 'en')}
						class:list={[
							'lang-link',
							{ active: lang === 'en' }
						]}
					>
						EN
					</a>
				</div>
			</div>
			<div class="text-toggle">
			</div>
		</div>
	</div>
</nav>

<script>
	class MenuButton extends HTMLElement {
		constructor() {
			super();

			// Inject menu toggle button when JS runs.
			this.appendChild(this.querySelector('template')!.content.cloneNode(true));
			const btn = this.querySelector('button')!;

			// Hide menu (shown by default to support no-JS browsers).
			const menu = document.getElementById('menu-content')!;
			menu.hidden = true;
			// Add "menu-content" class in JS to avoid covering content in non-JS browsers.
			menu.classList.add('menu-content');

			/** Set whether the menu is currently expanded or collapsed. */
			const setExpanded = (expand: boolean) => {
				btn.setAttribute('aria-expanded', expand ? 'true' : 'false');
				menu.hidden = !expand;
			};

			// Toggle menu visibility when the menu button is clicked.
			btn.addEventListener('click', () => setExpanded(menu.hidden));

			// Hide menu button for large screens.
			const handleViewports = (e: MediaQueryList | MediaQueryListEvent) => {
				setExpanded(e.matches);
				btn.hidden = e.matches;
			};
			const mediaQueries = window.matchMedia('(min-width: 50em)');
			handleViewports(mediaQueries);
			mediaQueries.addEventListener('change', handleViewports);
		}
	}
	customElements.define('menu-button', MenuButton);
</script>

<style>
	nav {
		z-index: 9999;
		position: relative;
		font-family: var(--font-brand);
		font-weight: 500;
	}

	.menu-header {
		display: flex;
		justify-content: space-between;
		gap: 0.5rem;
		padding: 1.5rem;
	}

	.site-title {
		display: flex;
		gap: 0.5rem;
		align-items: center;
		line-height: 1.1;
		color: var(--gray-0);
		text-decoration: none;
	}

	.menu-button {
		position: relative;
		display: flex;
		border: 0;
		border-radius: 999rem;
		padding: 0.5rem;
		font-size: 1.5rem;
		color: var(--gray-300);
		background: radial-gradient(var(--gray-900), var(--gray-800) 150%);
		box-shadow: var(--shadow-md);
	}

	.menu-button[aria-expanded='true'] {
		color: var(--gray-0);
		background: linear-gradient(180deg, var(--gray-600), transparent),
			radial-gradient(var(--gray-900), var(--gray-800) 150%);
	}

	.menu-button[hidden] {
		display: none;
	}

	.menu-button::before {
		position: absolute;
		inset: -1px;
		content: '';
		border-radius: 999rem;
		z-index: -1;
	}

	.menu-content {
		position: absolute;
		left: 0;
		right: 0;
	}

	.nav-items {
		margin: 0;
		display: flex;
		flex-direction: column;
		gap: 1rem;
		font-size: var(--text-md);
		line-height: 1.2;
		list-style: none;
		padding: 2rem;
		background-color: var(--gray-999);
		border-bottom: 1px solid var(--gray-800);
	}

	.link {
		display: inline-block;
		color: var(--gray-300);
		text-decoration: none;
	}

	.link.active {
		color: var(--gray-0);
	}

	.menu-footer {
		--icon-size: var(--text-xl);
		--icon-padding: 0.5rem;

		display: flex;
		justify-content: space-between;
		gap: 0.75rem;
		padding: 1.5rem 2rem 1.5rem 1.5rem;
		background-color: var(--gray-999);
		border-radius: 0 0 0.75rem 0.75rem;
		box-shadow: var(--shadow-lg);
	}

	.socials {
		display: flex;
		flex-wrap: wrap;
		
		font-size: var(--icon-size);
	}

	.social {
		display: flex;
		padding: var(--icon-padding);
		text-decoration: none;
		color: var(--accent-dark);
		transition: color var(--theme-transition);
	}

	.social:hover,
	.social:focus {
		color: var(--accent-text-over);
	}

	.text-toggle {
		display: flex;
		align-items: center;
		height: calc(var(--icon-size) + 2 * var(--icon-padding));
	}

	@media (min-width: 50em) {
		nav {
			display: grid;
			grid-template-columns: 1fr auto 1fr;
			align-items: center;
			padding: 2.5rem 5rem;
			gap: 1rem;
		}

		.menu-header {
			padding: 0;
		}

		.site-title {
			font-size: var(--text-lg);
		}

		.menu-content {
			display: contents;
		}

		.nav-items {
			position: relative;
			flex-direction: row;
			font-size: var(--text-sm);
			border-radius: 999rem;
			border: 0;
			padding: 0.5rem 0.5625rem;
			background: radial-gradient(var(--gray-900), var(--gray-800) 150%);
			box-shadow: var(--shadow-md);
		}

		.nav-items::before {
			position: absolute;
			inset: -1px;
			content: '';
			border-radius: 999rem;
			z-index: -1;
		}

		.link {
			padding: 0.5rem 1rem;
			border-radius: 999rem;
			transition:
				color var(--theme-transition),
				background-color var(--theme-transition);
		}

		.link:hover,
		.link:focus {
			color: var(--gray-100);
			background-color: var(--accent-subtle-overlay);
		}

		.link.active {
			color: var(--accent-text-over);
			background-color: var(--accent-regular);
		}

		.menu-footer {
			--icon-padding: 0.375rem;

			justify-self: flex-end;
			align-items: center;
			padding: 0;
			background-color: transparent;
			box-shadow: none;
		}

		.socials {
			display: none;
		}
	}

	@media (min-width: 60em) {
		.socials {
			display: flex;
			justify-content: flex-end;
			gap: 0;
		}
	}
	@media (forced-colors: active) {
		.link.active {
			color: SelectedItem;
		}
	}

	.language-selector {
		display: flex;
		align-items: center;
	}

	.language-links {
		display: flex;
		align-items: center;
		gap: 0.5rem;
		background: radial-gradient(var(--gray-900), var(--gray-800) 150%);
		padding: 0.5rem 1rem;
		border-radius: 999rem;
		box-shadow: var(--shadow-md);
	}

	.language-links::before {
		position: absolute;
		inset: -1px;
		content: '';
		border-radius: 999rem;
		z-index: -1;
	}

	.lang-link {
		color: var(--gray-300);
		text-decoration: none;
		font-weight: 500;
		padding: 0.25rem 0.5rem;
		border-radius: 0.5rem;
		transition: all 0.3s ease;
	}

	.lang-link:hover {
		color: var(--gray-100);
		background-color: var(--accent-subtle-overlay);
	}

	.lang-link.active {
		color: var(--accent-text-over);
		background-color: var(--accent-regular);
	}

	.separator {
		color: var(--gray-600);
	}
</style>
