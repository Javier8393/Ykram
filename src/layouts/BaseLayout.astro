---
import MainHead from "../components/MainHead.astro";
import Nav from "../components/Nav.astro";
import Footer from "../components/Footer.astro";

interface Props {
	title?: string | undefined;
	description?: string | undefined;
	lang?: string;
}

const { title, description } = Astro.props;
---

<html lang="es">
	<head>
		<MainHead title={title} description={description} />
	</head>

		<body>
			<div class="backgrounds">
				<!-- Componentes de la página -->
				<div class="content-wrapper">
					<Nav/>
					<slot />
					<Footer />
				</div>
				
				<!-- 15 Luces flotantes (con posiciones y tamaños iniciales aleatorios) -->
				<div class="light" style="width: 80px; height: 80px;"></div>
				<div class="light" style="width: 100px; height: 100px;"></div>
				<div class="light" style="width: 60px; height: 60px;"></div>
				<div class="light" style="width: 90px; height: 90px;"></div>
				<div class="light" style="width: 120px; height: 120px;"></div>
				<div class="light" style="width: 70px; height: 70px;"></div>
				<div class="light" style="width: 110px; height: 110px;"></div>
				<div class="light" style="width: 50px; height: 50px;"></div>
				<div class="light" style="width: 90px; height: 90px;"></div>
				<div class="light" style="width: 130px; height: 130px;"></div>
				<div class="light" style="width: 85px; height: 85px;"></div>
				<div class="light" style="width: 75px; height: 75px;"></div>
				<div class="light" style="width: 95px; height: 95px;"></div>
				<div class="light" style="width: 115px; height: 115px;"></div>
				<div class="light" style="width: 105px; height: 105px;"></div>
			</div>
			<style>
				:root {
					--bg-color: black;
					--light-color-1: rgba(134, 176, 85, 0.15); 
				}
		
				.backgrounds {
					min-height: 100vh;
					background-color: var(--bg-color);
					position: relative;
					z-index: 1;
					overflow: hidden;
					
				}
		
				/* Estilos y animación de luces flotantes */
				.light {
					position: absolute;
					z-index: 0;
					border-radius: 50%;
					background: var(--light-color-1);
					opacity: 0;
					pointer-events: none;
					animation: floatAndFade 20s ease-in-out infinite;
					transform-origin: center;
				}

				.content-wrapper {
					position: relative;
					z-index: 10; /* Los componentes encima de las luces */
				}
		
				/* Animación para mover y desvanecer luces */
				@keyframes floatAndFade {
					0% {
						transform: translate(0, 0) scale(1);
						opacity: 0; /* Comienza desvanecido */
					}
					10% {
						opacity: 1; /* Aparece completamente al 10% */
					}
					90% {
						opacity: 1; /* Permanece visible */
					}
					100% {
						transform: translate(-30px, 30px) scale(1);
						opacity: 0; /* Se desvanece al final */
					}
				}
			</style>
		
			<script>
				// Función para generar una posición aleatoria para las luces
				function randomPosition() {
					return {
						top: Math.random() * 100 + '%',
						left: Math.random() * 100 + '%'
					};
				}
		
				// Aplicar posición inicial y duraciones aleatorias a cada luz
				const lights = document.querySelectorAll('.light');
				lights.forEach((light, index) => {
					const { top, left } = randomPosition();
					const duration = 15 + Math.random() * 10; // Duración entre 15s y 25s
		
					// Asignar posiciones y duración inicial aleatoria
					(light as HTMLElement).style.top = top;
					(light as HTMLElement).style.left = left;
					(light as HTMLElement).style.animationDuration = `${duration}s`;
		
					// Cambiar posición después de cada ciclo de animación
					light.addEventListener('animationiteration', () => {
						const { top, left } = randomPosition();
						(light as HTMLElement).style.top = top;
						(light as HTMLElement).style.left = left;
					});
				});
			</script>
			
		</body>
		</html>
		